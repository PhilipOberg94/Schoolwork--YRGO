
HW-lektion03.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000015a  2**0
                  ALLOC, LOAD, DATA
  1 .text         00000080  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  0000015a  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  00000189  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000197  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000870  00000000  00000000  000001b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005fc  00000000  00000000  00000a27  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000200  00000000  00000000  00001023  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001224  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000208  00000000  00000000  00001248  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000001f  00000000  00000000  00001450  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  0000146f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  000000d8  000000d8  0000014c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001480  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .progmemx.data 00000008  00000080  00000080  000000f4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 15 .text.main    0000003a  00000088  00000088  000000fc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.__dummy_fini 00000002  000000e0  000000e0  00000154  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.__dummy_funcs_on_exit 00000002  000000e2  000000e2  00000156  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.__dummy_simulator_exit 00000002  000000e4  000000e4  00000158  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.exit    00000016  000000c2  000000c2  00000136  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text._Exit   00000004  000000dc  000000dc  00000150  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
   8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
   c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  10:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  14:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  18:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  1c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  20:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  24:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  28:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  2c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  30:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  34:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  38:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  3c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  40:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  44:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  48:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  4c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  50:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  54:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  58:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  5c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  60:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  64:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 44 00 	call	0x88	; 0x88 <main>
  78:	0c 94 61 00 	jmp	0xc2	; 0xc2 <exit>

0000007c <_exit>:
  7c:	f8 94       	cli

0000007e <__stop_program>:
  7e:	ff cf       	rjmp	.-2      	; 0x7e <__stop_program>

Disassembly of section .text:

000000d8 <__bad_interrupt>:
  d8:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.main:

00000088 <main>:
#include <avr/io.h>

int main(void)
{
    unsigned char z = 0;
    DDRC = 0;
  88:	17 b8       	out	0x07, r1	; 7
    DDRD = 0xFF;
  8a:	8f ef       	ldi	r24, 0xFF	; 255
  8c:	8a b9       	out	0x0a, r24	; 10

    while(1) {
        z = PINC;
  8e:	86 b1       	in	r24, 0x06	; 6
        z = z & 0b00000011;
  90:	83 70       	andi	r24, 0x03	; 3
        
        if (z == 0) {
  92:	21 f4       	brne	.+8      	; 0x9c <main+0x14>
            PORTD = "0";
  94:	20 e8       	ldi	r18, 0x80	; 128
  96:	30 e0       	ldi	r19, 0x00	; 0
  98:	40 e0       	ldi	r20, 0x00	; 0
  9a:	2b b9       	out	0x0b, r18	; 11
        }
        if (z == 1) {
  9c:	81 30       	cpi	r24, 0x01	; 1
  9e:	21 f4       	brne	.+8      	; 0xa8 <main+0x20>
            PORTD = "1";
  a0:	22 e8       	ldi	r18, 0x82	; 130
  a2:	30 e0       	ldi	r19, 0x00	; 0
  a4:	40 e0       	ldi	r20, 0x00	; 0
  a6:	2b b9       	out	0x0b, r18	; 11
        }
        if (z == 2) {
  a8:	82 30       	cpi	r24, 0x02	; 2
  aa:	21 f4       	brne	.+8      	; 0xb4 <main+0x2c>
            PORTD = "2";
  ac:	24 e8       	ldi	r18, 0x84	; 132
  ae:	30 e0       	ldi	r19, 0x00	; 0
  b0:	40 e0       	ldi	r20, 0x00	; 0
  b2:	2b b9       	out	0x0b, r18	; 11
        }
        if (z == 3) {
  b4:	83 30       	cpi	r24, 0x03	; 3
  b6:	59 f7       	brne	.-42     	; 0x8e <main+0x6>
            PORTD = "3";
  b8:	86 e8       	ldi	r24, 0x86	; 134
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	a0 e0       	ldi	r26, 0x00	; 0
  be:	8b b9       	out	0x0b, r24	; 11
  c0:	e6 cf       	rjmp	.-52     	; 0x8e <main+0x6>

Disassembly of section .text.__dummy_fini:

000000e0 <_fini>:
  e0:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

000000e2 <__funcs_on_exit>:
  e2:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

000000e4 <__simulator_exit>:
  e4:	08 95       	ret

Disassembly of section .text.exit:

000000c2 <exit>:
  c2:	ec 01       	movw	r28, r24
  c4:	0e 94 71 00 	call	0xe2	; 0xe2 <__funcs_on_exit>
  c8:	0e 94 70 00 	call	0xe0	; 0xe0 <_fini>
  cc:	ce 01       	movw	r24, r28
  ce:	0e 94 72 00 	call	0xe4	; 0xe4 <__simulator_exit>
  d2:	ce 01       	movw	r24, r28
  d4:	0e 94 6e 00 	call	0xdc	; 0xdc <_Exit>

Disassembly of section .text._Exit:

000000dc <_Exit>:
  dc:	0e 94 3e 00 	call	0x7c	; 0x7c <_exit>
