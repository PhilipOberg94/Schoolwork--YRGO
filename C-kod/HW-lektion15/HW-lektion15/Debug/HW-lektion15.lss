
HW-lektion15.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  000000f0  00000164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000f0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000170  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001a0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000001e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000797  00000000  00000000  00000210  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006e9  00000000  00000000  000009a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002b0  00000000  00000000  00001090  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00001340  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003bc  00000000  00000000  00001384  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000067  00000000  00000000  00001740  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  000017a7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 ef       	ldi	r30, 0xF0	; 240
  7c:	f0 e0       	ldi	r31, 0x00	; 0
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 30       	cpi	r26, 0x0C	; 12
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 5c 00 	call	0xb8	; 0xb8 <main>
  8e:	0c 94 76 00 	jmp	0xec	; 0xec <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <usart_init>:
#include <avr/io.h>
#include <avr/delay.h>
uint8_t chararray [12] = {'H','E','L','L','O','!', ' ', 'J', 'O', 'C', 'K', 'E'};

void usart_init () {
    UCSR0B = (1<<TXEN0);
  96:	88 e0       	ldi	r24, 0x08	; 8
  98:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    UCSR0C = (1<<UCSZ01) | (1<<UCSZ00);
  9c:	86 e0       	ldi	r24, 0x06	; 6
  9e:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
    UBRR0L = 103;
  a2:	87 e6       	ldi	r24, 0x67	; 103
  a4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
  a8:	08 95       	ret

000000aa <usart_send>:
}

void usart_send (unsigned char ch) {
    while (!(UCSR0A&(1<<UDRE0)));
  aa:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  ae:	95 ff       	sbrs	r25, 5
  b0:	fc cf       	rjmp	.-8      	; 0xaa <usart_send>
    UDR0 = ch;
  b2:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  b6:	08 95       	ret

000000b8 <main>:
}

int main(void)
{
    usart_init();
  b8:	0e 94 4b 00 	call	0x96	; 0x96 <usart_init>
    while (1) {
        for (uint8_t i = 0;i < 14;i++)
  bc:	c0 e0       	ldi	r28, 0x00	; 0
  be:	13 c0       	rjmp	.+38     	; 0xe6 <main+0x2e>
        {
            usart_send(chararray [i]);
  c0:	ec 2f       	mov	r30, r28
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	e0 50       	subi	r30, 0x00	; 0
  c6:	ff 4f       	sbci	r31, 0xFF	; 255
  c8:	80 81       	ld	r24, Z
  ca:	0e 94 55 00 	call	0xaa	; 0xaa <usart_send>
            
            if (i == 13)
  ce:	cd 30       	cpi	r28, 0x0D	; 13
  d0:	49 f4       	brne	.+18     	; 0xe4 <main+0x2c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d2:	2f ef       	ldi	r18, 0xFF	; 255
  d4:	83 ed       	ldi	r24, 0xD3	; 211
  d6:	90 e3       	ldi	r25, 0x30	; 48
  d8:	21 50       	subi	r18, 0x01	; 1
  da:	80 40       	sbci	r24, 0x00	; 0
  dc:	90 40       	sbci	r25, 0x00	; 0
  de:	e1 f7       	brne	.-8      	; 0xd8 <main+0x20>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <main+0x2a>
  e2:	00 00       	nop

int main(void)
{
    usart_init();
    while (1) {
        for (uint8_t i = 0;i < 14;i++)
  e4:	cf 5f       	subi	r28, 0xFF	; 255
  e6:	ce 30       	cpi	r28, 0x0E	; 14
  e8:	58 f3       	brcs	.-42     	; 0xc0 <main+0x8>
  ea:	e8 cf       	rjmp	.-48     	; 0xbc <main+0x4>

000000ec <_exit>:
  ec:	f8 94       	cli

000000ee <__stop_program>:
  ee:	ff cf       	rjmp	.-2      	; 0xee <__stop_program>
