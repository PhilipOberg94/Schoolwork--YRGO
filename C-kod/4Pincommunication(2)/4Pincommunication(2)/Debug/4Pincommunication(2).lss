
4Pincommunication(2).elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  00000234  000002a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000234  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002c0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002f0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000090  00000000  00000000  00000330  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000df0  00000000  00000000  000003c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000087f  00000000  00000000  000011b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000544  00000000  00000000  00001a2f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000124  00000000  00000000  00001f74  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004af  00000000  00000000  00002098  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000450  00000000  00000000  00002547  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000080  00000000  00000000  00002997  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e3       	ldi	r30, 0x34	; 52
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 31       	cpi	r26, 0x18	; 24
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a8 e1       	ldi	r26, 0x18	; 24
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a8 31       	cpi	r26, 0x18	; 24
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 05 01 	call	0x20a	; 0x20a <main>
  9e:	0c 94 18 01 	jmp	0x230	; 0x230 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <SPI_init>:
    lcd_print("                ");
}
char* int_to_ascii (uint16_t data) {
    char* datavalue = itoa(data,buffer,10);
    return datavalue;
}
  a6:	85 b1       	in	r24, 0x05	; 5
  a8:	8c 62       	ori	r24, 0x2C	; 44
  aa:	85 b9       	out	0x05, r24	; 5
  ac:	83 e5       	ldi	r24, 0x53	; 83
  ae:	8c bd       	out	0x2c, r24	; 44
  b0:	08 95       	ret

000000b2 <lcdCOmmand>:
  b2:	98 2f       	mov	r25, r24
  b4:	90 7f       	andi	r25, 0xF0	; 240
  b6:	9b b9       	out	0x0b, r25	; 11
  b8:	95 b1       	in	r25, 0x05	; 5
  ba:	9e 7f       	andi	r25, 0xFE	; 254
  bc:	95 b9       	out	0x05, r25	; 5
  be:	95 b1       	in	r25, 0x05	; 5
  c0:	9d 7f       	andi	r25, 0xFD	; 253
  c2:	95 b9       	out	0x05, r25	; 5
  c4:	95 b1       	in	r25, 0x05	; 5
  c6:	94 60       	ori	r25, 0x04	; 4
  c8:	95 b9       	out	0x05, r25	; 5
  ca:	95 e3       	ldi	r25, 0x35	; 53
  cc:	9a 95       	dec	r25
  ce:	f1 f7       	brne	.-4      	; 0xcc <lcdCOmmand+0x1a>
  d0:	00 00       	nop
  d2:	95 b1       	in	r25, 0x05	; 5
  d4:	9b 7f       	andi	r25, 0xFB	; 251
  d6:	95 b9       	out	0x05, r25	; 5
  d8:	ef ed       	ldi	r30, 0xDF	; 223
  da:	fe e2       	ldi	r31, 0x2E	; 46
  dc:	31 97       	sbiw	r30, 0x01	; 1
  de:	f1 f7       	brne	.-4      	; 0xdc <lcdCOmmand+0x2a>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <lcdCOmmand+0x30>
  e2:	00 00       	nop
  e4:	82 95       	swap	r24
  e6:	80 7f       	andi	r24, 0xF0	; 240
  e8:	8b b9       	out	0x0b, r24	; 11
  ea:	85 b1       	in	r24, 0x05	; 5
  ec:	84 60       	ori	r24, 0x04	; 4
  ee:	85 b9       	out	0x05, r24	; 5
  f0:	f5 e3       	ldi	r31, 0x35	; 53
  f2:	fa 95       	dec	r31
  f4:	f1 f7       	brne	.-4      	; 0xf2 <lcdCOmmand+0x40>
  f6:	00 00       	nop
  f8:	85 b1       	in	r24, 0x05	; 5
  fa:	8b 7f       	andi	r24, 0xFB	; 251
  fc:	85 b9       	out	0x05, r24	; 5
  fe:	8f ed       	ldi	r24, 0xDF	; 223
 100:	9e e2       	ldi	r25, 0x2E	; 46
 102:	01 97       	sbiw	r24, 0x01	; 1
 104:	f1 f7       	brne	.-4      	; 0x102 <lcdCOmmand+0x50>
 106:	00 c0       	rjmp	.+0      	; 0x108 <lcdCOmmand+0x56>
 108:	00 00       	nop
 10a:	08 95       	ret

0000010c <lcdData>:
 10c:	98 2f       	mov	r25, r24
 10e:	90 7f       	andi	r25, 0xF0	; 240
 110:	9b b9       	out	0x0b, r25	; 11
 112:	95 b1       	in	r25, 0x05	; 5
 114:	91 60       	ori	r25, 0x01	; 1
 116:	95 b9       	out	0x05, r25	; 5
 118:	95 b1       	in	r25, 0x05	; 5
 11a:	94 60       	ori	r25, 0x04	; 4
 11c:	95 b9       	out	0x05, r25	; 5
 11e:	95 e3       	ldi	r25, 0x35	; 53
 120:	9a 95       	dec	r25
 122:	f1 f7       	brne	.-4      	; 0x120 <lcdData+0x14>
 124:	00 00       	nop
 126:	95 b1       	in	r25, 0x05	; 5
 128:	9b 7f       	andi	r25, 0xFB	; 251
 12a:	95 b9       	out	0x05, r25	; 5
 12c:	82 95       	swap	r24
 12e:	80 7f       	andi	r24, 0xF0	; 240
 130:	8b b9       	out	0x0b, r24	; 11
 132:	85 b1       	in	r24, 0x05	; 5
 134:	84 60       	ori	r24, 0x04	; 4
 136:	85 b9       	out	0x05, r24	; 5
 138:	85 e3       	ldi	r24, 0x35	; 53
 13a:	8a 95       	dec	r24
 13c:	f1 f7       	brne	.-4      	; 0x13a <lcdData+0x2e>
 13e:	00 00       	nop
 140:	85 b1       	in	r24, 0x05	; 5
 142:	8b 7f       	andi	r24, 0xFB	; 251
 144:	85 b9       	out	0x05, r24	; 5
 146:	8f ed       	ldi	r24, 0xDF	; 223
 148:	9e e2       	ldi	r25, 0x2E	; 46
 14a:	01 97       	sbiw	r24, 0x01	; 1
 14c:	f1 f7       	brne	.-4      	; 0x14a <lcdData+0x3e>
 14e:	00 c0       	rjmp	.+0      	; 0x150 <lcdData+0x44>
 150:	00 00       	nop
 152:	08 95       	ret

00000154 <lcd_init>:
 154:	8f ef       	ldi	r24, 0xFF	; 255
 156:	8a b9       	out	0x0a, r24	; 10
 158:	84 b9       	out	0x04, r24	; 4
 15a:	85 b1       	in	r24, 0x05	; 5
 15c:	8b 7f       	andi	r24, 0xFB	; 251
 15e:	85 b9       	out	0x05, r24	; 5
 160:	83 e3       	ldi	r24, 0x33	; 51
 162:	0e 94 59 00 	call	0xb2	; 0xb2 <lcdCOmmand>
 166:	82 e3       	ldi	r24, 0x32	; 50
 168:	0e 94 59 00 	call	0xb2	; 0xb2 <lcdCOmmand>
 16c:	88 e2       	ldi	r24, 0x28	; 40
 16e:	0e 94 59 00 	call	0xb2	; 0xb2 <lcdCOmmand>
 172:	8e e0       	ldi	r24, 0x0E	; 14
 174:	0e 94 59 00 	call	0xb2	; 0xb2 <lcdCOmmand>
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	0e 94 59 00 	call	0xb2	; 0xb2 <lcdCOmmand>
 17e:	8f e3       	ldi	r24, 0x3F	; 63
 180:	9f e1       	ldi	r25, 0x1F	; 31
 182:	01 97       	sbiw	r24, 0x01	; 1
 184:	f1 f7       	brne	.-4      	; 0x182 <lcd_init+0x2e>
 186:	00 c0       	rjmp	.+0      	; 0x188 <lcd_init+0x34>
 188:	00 00       	nop
 18a:	86 e0       	ldi	r24, 0x06	; 6
 18c:	0e 94 59 00 	call	0xb2	; 0xb2 <lcdCOmmand>
 190:	08 95       	ret

00000192 <lcd_gotoxy>:
 192:	cf 93       	push	r28
 194:	df 93       	push	r29
 196:	00 d0       	rcall	.+0      	; 0x198 <lcd_gotoxy+0x6>
 198:	00 d0       	rcall	.+0      	; 0x19a <lcd_gotoxy+0x8>
 19a:	cd b7       	in	r28, 0x3d	; 61
 19c:	de b7       	in	r29, 0x3e	; 62
 19e:	90 e8       	ldi	r25, 0x80	; 128
 1a0:	99 83       	std	Y+1, r25	; 0x01
 1a2:	90 ec       	ldi	r25, 0xC0	; 192
 1a4:	9a 83       	std	Y+2, r25	; 0x02
 1a6:	94 e9       	ldi	r25, 0x94	; 148
 1a8:	9b 83       	std	Y+3, r25	; 0x03
 1aa:	94 ed       	ldi	r25, 0xD4	; 212
 1ac:	9c 83       	std	Y+4, r25	; 0x04
 1ae:	e6 2f       	mov	r30, r22
 1b0:	f0 e0       	ldi	r31, 0x00	; 0
 1b2:	31 97       	sbiw	r30, 0x01	; 1
 1b4:	21 e0       	ldi	r18, 0x01	; 1
 1b6:	30 e0       	ldi	r19, 0x00	; 0
 1b8:	2c 0f       	add	r18, r28
 1ba:	3d 1f       	adc	r19, r29
 1bc:	e2 0f       	add	r30, r18
 1be:	f3 1f       	adc	r31, r19
 1c0:	90 81       	ld	r25, Z
 1c2:	89 0f       	add	r24, r25
 1c4:	81 50       	subi	r24, 0x01	; 1
 1c6:	0e 94 59 00 	call	0xb2	; 0xb2 <lcdCOmmand>
 1ca:	8f e9       	ldi	r24, 0x9F	; 159
 1cc:	9f e0       	ldi	r25, 0x0F	; 15
 1ce:	01 97       	sbiw	r24, 0x01	; 1
 1d0:	f1 f7       	brne	.-4      	; 0x1ce <lcd_gotoxy+0x3c>
 1d2:	00 c0       	rjmp	.+0      	; 0x1d4 <lcd_gotoxy+0x42>
 1d4:	00 00       	nop
 1d6:	0f 90       	pop	r0
 1d8:	0f 90       	pop	r0
 1da:	0f 90       	pop	r0
 1dc:	0f 90       	pop	r0
 1de:	df 91       	pop	r29
 1e0:	cf 91       	pop	r28
 1e2:	08 95       	ret

000001e4 <lcd_print>:
 1e4:	0f 93       	push	r16
 1e6:	1f 93       	push	r17
 1e8:	cf 93       	push	r28
 1ea:	8c 01       	movw	r16, r24
 1ec:	c0 e0       	ldi	r28, 0x00	; 0
 1ee:	03 c0       	rjmp	.+6      	; 0x1f6 <lcd_print+0x12>
 1f0:	0e 94 86 00 	call	0x10c	; 0x10c <lcdData>
 1f4:	cf 5f       	subi	r28, 0xFF	; 255
 1f6:	f8 01       	movw	r30, r16
 1f8:	ec 0f       	add	r30, r28
 1fa:	f1 1d       	adc	r31, r1
 1fc:	80 81       	ld	r24, Z
 1fe:	81 11       	cpse	r24, r1
 200:	f7 cf       	rjmp	.-18     	; 0x1f0 <lcd_print+0xc>
 202:	cf 91       	pop	r28
 204:	1f 91       	pop	r17
 206:	0f 91       	pop	r16
 208:	08 95       	ret

0000020a <main>:



int main(void)
{
    SPI_init();
 20a:	0e 94 53 00 	call	0xa6	; 0xa6 <SPI_init>
    lcd_init();
 20e:	0e 94 aa 00 	call	0x154	; 0x154 <lcd_init>
        //itoa (SPDR,str, 10);
        //lcd_gotoxy(1,1);
        //lcd_print(str);
        //_delay_ms(100);
        
        lcd_gotoxy(1,1);
 212:	61 e0       	ldi	r22, 0x01	; 1
 214:	81 e0       	ldi	r24, 0x01	; 1
 216:	0e 94 c9 00 	call	0x192	; 0x192 <lcd_gotoxy>
        lcd_print("Hello");
 21a:	81 e1       	ldi	r24, 0x11	; 17
 21c:	91 e0       	ldi	r25, 0x01	; 1
 21e:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <lcd_print>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 222:	8f e3       	ldi	r24, 0x3F	; 63
 224:	9c e9       	ldi	r25, 0x9C	; 156
 226:	01 97       	sbiw	r24, 0x01	; 1
 228:	f1 f7       	brne	.-4      	; 0x226 <main+0x1c>
 22a:	00 c0       	rjmp	.+0      	; 0x22c <main+0x22>
 22c:	00 00       	nop
 22e:	f1 cf       	rjmp	.-30     	; 0x212 <main+0x8>

00000230 <_exit>:
 230:	f8 94       	cli

00000232 <__stop_program>:
 232:	ff cf       	rjmp	.-2      	; 0x232 <__stop_program>
