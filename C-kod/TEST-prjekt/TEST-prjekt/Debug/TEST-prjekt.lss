
TEST-prjekt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  000002a6  0000031a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002a6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000332  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000364  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  000003a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c2f  00000000  00000000  000003fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000785  00000000  00000000  0000102b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000048f  00000000  00000000  000017b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c8  00000000  00000000  00001c40  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000040b  00000000  00000000  00001d08  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000004ab  00000000  00000000  00002113  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  000025be  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 ea       	ldi	r30, 0xA6	; 166
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 31       	cpi	r26, 0x18	; 24
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 3e 01 	call	0x27c	; 0x27c <main>
  8e:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <lcdCommand>:
#define LCD_RS 0
#define LCD_RW 3
#define LCD_EN 1

void lcdCommand(unsigned char cmnd) {
    PORTD = cmnd & 0xF0; // Rewrite this
  96:	98 2f       	mov	r25, r24
  98:	90 7f       	andi	r25, 0xF0	; 240
  9a:	9b b9       	out	0x0b, r25	; 11
    PORTB &= ~(1<<LCD_RS);
  9c:	95 b1       	in	r25, 0x05	; 5
  9e:	9e 7f       	andi	r25, 0xFE	; 254
  a0:	95 b9       	out	0x05, r25	; 5
    PORTD |= (1<<LCD_EN);
  a2:	9b b1       	in	r25, 0x0b	; 11
  a4:	92 60       	ori	r25, 0x02	; 2
  a6:	9b b9       	out	0x0b, r25	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a8:	95 e0       	ldi	r25, 0x05	; 5
  aa:	9a 95       	dec	r25
  ac:	f1 f7       	brne	.-4      	; 0xaa <lcdCommand+0x14>
  ae:	00 00       	nop
    _delay_us(1);
    PORTD &= ~(1<<LCD_EN);
  b0:	9b b1       	in	r25, 0x0b	; 11
  b2:	9d 7f       	andi	r25, 0xFD	; 253
  b4:	9b b9       	out	0x0b, r25	; 11
  b6:	ef e8       	ldi	r30, 0x8F	; 143
  b8:	f1 e0       	ldi	r31, 0x01	; 1
  ba:	31 97       	sbiw	r30, 0x01	; 1
  bc:	f1 f7       	brne	.-4      	; 0xba <lcdCommand+0x24>
  be:	00 c0       	rjmp	.+0      	; 0xc0 <lcdCommand+0x2a>
  c0:	00 00       	nop
    _delay_us(100);
    
    PORTD = cmnd<<1;
  c2:	88 0f       	add	r24, r24
  c4:	8b b9       	out	0x0b, r24	; 11
    PORTD |= (1<<LCD_EN);
  c6:	8b b1       	in	r24, 0x0b	; 11
  c8:	82 60       	ori	r24, 0x02	; 2
  ca:	8b b9       	out	0x0b, r24	; 11
  cc:	f5 e0       	ldi	r31, 0x05	; 5
  ce:	fa 95       	dec	r31
  d0:	f1 f7       	brne	.-4      	; 0xce <lcdCommand+0x38>
  d2:	00 00       	nop
    _delay_us(1);
    PORTD &= ~(1<<LCD_EN);
  d4:	8b b1       	in	r24, 0x0b	; 11
  d6:	8d 7f       	andi	r24, 0xFD	; 253
  d8:	8b b9       	out	0x0b, r24	; 11
  da:	8f e8       	ldi	r24, 0x8F	; 143
  dc:	91 e0       	ldi	r25, 0x01	; 1
  de:	01 97       	sbiw	r24, 0x01	; 1
  e0:	f1 f7       	brne	.-4      	; 0xde <lcdCommand+0x48>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <lcdCommand+0x4e>
  e4:	00 00       	nop
  e6:	08 95       	ret

000000e8 <lcdData>:
    _delay_us(100);
}

void lcdData(unsigned char data) {
    PORTD = data & 0xF0;
  e8:	98 2f       	mov	r25, r24
  ea:	90 7f       	andi	r25, 0xF0	; 240
  ec:	9b b9       	out	0x0b, r25	; 11
    PORTB |= (1<<LCD_RS);
  ee:	95 b1       	in	r25, 0x05	; 5
  f0:	91 60       	ori	r25, 0x01	; 1
  f2:	95 b9       	out	0x05, r25	; 5
    PORTD |= (1<<LCD_EN);
  f4:	9b b1       	in	r25, 0x0b	; 11
  f6:	92 60       	ori	r25, 0x02	; 2
  f8:	9b b9       	out	0x0b, r25	; 11
  fa:	95 e0       	ldi	r25, 0x05	; 5
  fc:	9a 95       	dec	r25
  fe:	f1 f7       	brne	.-4      	; 0xfc <lcdData+0x14>
 100:	00 00       	nop
    _delay_us(1);
    PORTD &= ~(1<<LCD_EN);
 102:	9b b1       	in	r25, 0x0b	; 11
 104:	9d 7f       	andi	r25, 0xFD	; 253
 106:	9b b9       	out	0x0b, r25	; 11
    PORTD = data<<1;
 108:	88 0f       	add	r24, r24
 10a:	8b b9       	out	0x0b, r24	; 11
    PORTD |= (1<<LCD_EN);
 10c:	8b b1       	in	r24, 0x0b	; 11
 10e:	82 60       	ori	r24, 0x02	; 2
 110:	8b b9       	out	0x0b, r24	; 11
 112:	85 e0       	ldi	r24, 0x05	; 5
 114:	8a 95       	dec	r24
 116:	f1 f7       	brne	.-4      	; 0x114 <lcdData+0x2c>
 118:	00 00       	nop
    _delay_us(1);
    PORTD &= ~(1<<LCD_EN);
 11a:	8b b1       	in	r24, 0x0b	; 11
 11c:	8d 7f       	andi	r24, 0xFD	; 253
 11e:	8b b9       	out	0x0b, r24	; 11
 120:	8f e8       	ldi	r24, 0x8F	; 143
 122:	91 e0       	ldi	r25, 0x01	; 1
 124:	01 97       	sbiw	r24, 0x01	; 1
 126:	f1 f7       	brne	.-4      	; 0x124 <lcdData+0x3c>
 128:	00 c0       	rjmp	.+0      	; 0x12a <lcdData+0x42>
 12a:	00 00       	nop
 12c:	08 95       	ret

0000012e <lcd_init>:
    _delay_us(100);
}

void lcd_init() {
    DDRD = 0xFF;
 12e:	8f ef       	ldi	r24, 0xFF	; 255
 130:	8a b9       	out	0x0a, r24	; 10
    DDRB = 0xFF;
 132:	84 b9       	out	0x04, r24	; 4
    PORTD &= ~(1<<LCD_EN);
 134:	8b b1       	in	r24, 0x0b	; 11
 136:	8d 7f       	andi	r24, 0xFD	; 253
 138:	8b b9       	out	0x0b, r24	; 11
    lcdCommand(0x33);
 13a:	83 e3       	ldi	r24, 0x33	; 51
 13c:	0e 94 4b 00 	call	0x96	; 0x96 <lcdCommand>
    lcdCommand(0x32);
 140:	82 e3       	ldi	r24, 0x32	; 50
 142:	0e 94 4b 00 	call	0x96	; 0x96 <lcdCommand>
    lcdCommand(0x28);
 146:	88 e2       	ldi	r24, 0x28	; 40
 148:	0e 94 4b 00 	call	0x96	; 0x96 <lcdCommand>
    lcdCommand(0x0e);
 14c:	8e e0       	ldi	r24, 0x0E	; 14
 14e:	0e 94 4b 00 	call	0x96	; 0x96 <lcdCommand>
    lcdCommand(0x01);
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	0e 94 4b 00 	call	0x96	; 0x96 <lcdCommand>
 158:	8f e3       	ldi	r24, 0x3F	; 63
 15a:	9f e1       	ldi	r25, 0x1F	; 31
 15c:	01 97       	sbiw	r24, 0x01	; 1
 15e:	f1 f7       	brne	.-4      	; 0x15c <lcd_init+0x2e>
 160:	00 c0       	rjmp	.+0      	; 0x162 <lcd_init+0x34>
 162:	00 00       	nop
    _delay_us(2000);
    lcdCommand(0x06);
 164:	86 e0       	ldi	r24, 0x06	; 6
 166:	0e 94 4b 00 	call	0x96	; 0x96 <lcdCommand>
 16a:	08 95       	ret

0000016c <lcd_set_position>:
}

void lcd_set_position(unsigned char x, unsigned char y) {
 16c:	cf 93       	push	r28
 16e:	df 93       	push	r29
 170:	00 d0       	rcall	.+0      	; 0x172 <lcd_set_position+0x6>
 172:	00 d0       	rcall	.+0      	; 0x174 <lcd_set_position+0x8>
 174:	cd b7       	in	r28, 0x3d	; 61
 176:	de b7       	in	r29, 0x3e	; 62
    unsigned char firstCharAdr[] = {0x80,0xC0,0x94,0xD4};
 178:	90 e8       	ldi	r25, 0x80	; 128
 17a:	99 83       	std	Y+1, r25	; 0x01
 17c:	90 ec       	ldi	r25, 0xC0	; 192
 17e:	9a 83       	std	Y+2, r25	; 0x02
 180:	94 e9       	ldi	r25, 0x94	; 148
 182:	9b 83       	std	Y+3, r25	; 0x03
 184:	94 ed       	ldi	r25, 0xD4	; 212
 186:	9c 83       	std	Y+4, r25	; 0x04
    lcdCommand(firstCharAdr[y-1] + x - 1);
 188:	e6 2f       	mov	r30, r22
 18a:	f0 e0       	ldi	r31, 0x00	; 0
 18c:	31 97       	sbiw	r30, 0x01	; 1
 18e:	21 e0       	ldi	r18, 0x01	; 1
 190:	30 e0       	ldi	r19, 0x00	; 0
 192:	2c 0f       	add	r18, r28
 194:	3d 1f       	adc	r19, r29
 196:	e2 0f       	add	r30, r18
 198:	f3 1f       	adc	r31, r19
 19a:	90 81       	ld	r25, Z
 19c:	89 0f       	add	r24, r25
 19e:	81 50       	subi	r24, 0x01	; 1
 1a0:	0e 94 4b 00 	call	0x96	; 0x96 <lcdCommand>
 1a4:	8f e8       	ldi	r24, 0x8F	; 143
 1a6:	91 e0       	ldi	r25, 0x01	; 1
 1a8:	01 97       	sbiw	r24, 0x01	; 1
 1aa:	f1 f7       	brne	.-4      	; 0x1a8 <lcd_set_position+0x3c>
 1ac:	00 c0       	rjmp	.+0      	; 0x1ae <lcd_set_position+0x42>
 1ae:	00 00       	nop
    _delay_us(100);
}
 1b0:	0f 90       	pop	r0
 1b2:	0f 90       	pop	r0
 1b4:	0f 90       	pop	r0
 1b6:	0f 90       	pop	r0
 1b8:	df 91       	pop	r29
 1ba:	cf 91       	pop	r28
 1bc:	08 95       	ret

000001be <lcd_print>:

void lcd_print(char * str) {
 1be:	0f 93       	push	r16
 1c0:	1f 93       	push	r17
 1c2:	cf 93       	push	r28
 1c4:	8c 01       	movw	r16, r24
    unsigned char i = 0;
 1c6:	c0 e0       	ldi	r28, 0x00	; 0
    
    while(str[i] != 0) {
 1c8:	03 c0       	rjmp	.+6      	; 0x1d0 <lcd_print+0x12>
        lcdData(str[i]);
 1ca:	0e 94 74 00 	call	0xe8	; 0xe8 <lcdData>
        i++;
 1ce:	cf 5f       	subi	r28, 0xFF	; 255
}

void lcd_print(char * str) {
    unsigned char i = 0;
    
    while(str[i] != 0) {
 1d0:	f8 01       	movw	r30, r16
 1d2:	ec 0f       	add	r30, r28
 1d4:	f1 1d       	adc	r31, r1
 1d6:	80 81       	ld	r24, Z
 1d8:	81 11       	cpse	r24, r1
 1da:	f7 cf       	rjmp	.-18     	; 0x1ca <lcd_print+0xc>
        lcdData(str[i]);
        i++;
    }
}
 1dc:	cf 91       	pop	r28
 1de:	1f 91       	pop	r17
 1e0:	0f 91       	pop	r16
 1e2:	08 95       	ret

000001e4 <lcd_clear>:

void lcd_clear() {
    lcd_set_position(1,1);
 1e4:	61 e0       	ldi	r22, 0x01	; 1
 1e6:	81 e0       	ldi	r24, 0x01	; 1
 1e8:	0e 94 b6 00 	call	0x16c	; 0x16c <lcd_set_position>
    lcd_print("                ");
 1ec:	80 e0       	ldi	r24, 0x00	; 0
 1ee:	91 e0       	ldi	r25, 0x01	; 1
 1f0:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_print>
    lcd_set_position(1,2);
 1f4:	62 e0       	ldi	r22, 0x02	; 2
 1f6:	81 e0       	ldi	r24, 0x01	; 1
 1f8:	0e 94 b6 00 	call	0x16c	; 0x16c <lcd_set_position>
    lcd_print("                ");
 1fc:	80 e0       	ldi	r24, 0x00	; 0
 1fe:	91 e0       	ldi	r25, 0x01	; 1
 200:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_print>
    lcdCommand(0);
 204:	80 e0       	ldi	r24, 0x00	; 0
 206:	0e 94 4b 00 	call	0x96	; 0x96 <lcdCommand>
 20a:	08 95       	ret

0000020c <lcd_write>:
}


void lcd_write(char *str) {
 20c:	0f 93       	push	r16
 20e:	1f 93       	push	r17
 210:	cf 93       	push	r28
 212:	df 93       	push	r29
 214:	8c 01       	movw	r16, r24
    lcd_clear(); // Clear the screen screen
 216:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <lcd_clear>
    
    // Length of string
    unsigned char len = strlen(str);
 21a:	f8 01       	movw	r30, r16
 21c:	01 90       	ld	r0, Z+
 21e:	00 20       	and	r0, r0
 220:	e9 f7       	brne	.-6      	; 0x21c <lcd_write+0x10>
 222:	31 97       	sbiw	r30, 0x01	; 1
    
    // Limit string to only 32 characters long
    len = (len > 32) ? 32 : len;
 224:	de 2f       	mov	r29, r30
 226:	d0 1b       	sub	r29, r16
 228:	d1 32       	cpi	r29, 0x21	; 33
 22a:	08 f0       	brcs	.+2      	; 0x22e <lcd_write+0x22>
 22c:	d0 e2       	ldi	r29, 0x20	; 32
    
    // Display on first line!
    lcd_set_position(1, 1);
 22e:	61 e0       	ldi	r22, 0x01	; 1
 230:	81 e0       	ldi	r24, 0x01	; 1
 232:	0e 94 b6 00 	call	0x16c	; 0x16c <lcd_set_position>
    for (unsigned char i = 0; i < len && i < 16; ++i) {
 236:	c0 e0       	ldi	r28, 0x00	; 0
 238:	07 c0       	rjmp	.+14     	; 0x248 <lcd_write+0x3c>
        lcdData(str[i]);
 23a:	f8 01       	movw	r30, r16
 23c:	ec 0f       	add	r30, r28
 23e:	f1 1d       	adc	r31, r1
 240:	80 81       	ld	r24, Z
 242:	0e 94 74 00 	call	0xe8	; 0xe8 <lcdData>
    // Limit string to only 32 characters long
    len = (len > 32) ? 32 : len;
    
    // Display on first line!
    lcd_set_position(1, 1);
    for (unsigned char i = 0; i < len && i < 16; ++i) {
 246:	cf 5f       	subi	r28, 0xFF	; 255
 248:	cd 17       	cp	r28, r29
 24a:	10 f4       	brcc	.+4      	; 0x250 <lcd_write+0x44>
 24c:	c0 31       	cpi	r28, 0x10	; 16
 24e:	a8 f3       	brcs	.-22     	; 0x23a <lcd_write+0x2e>
        lcdData(str[i]);
    }
    
    // Display on the second line!
    if (len > 16) {
 250:	d1 31       	cpi	r29, 0x11	; 17
 252:	78 f0       	brcs	.+30     	; 0x272 <lcd_write+0x66>
        lcd_set_position(1, 2);
 254:	62 e0       	ldi	r22, 0x02	; 2
 256:	81 e0       	ldi	r24, 0x01	; 1
 258:	0e 94 b6 00 	call	0x16c	; 0x16c <lcd_set_position>
        for (unsigned char i = 16; i < len; ++i) {
 25c:	c0 e1       	ldi	r28, 0x10	; 16
 25e:	07 c0       	rjmp	.+14     	; 0x26e <lcd_write+0x62>
            lcdData(str[i]);
 260:	f8 01       	movw	r30, r16
 262:	ec 0f       	add	r30, r28
 264:	f1 1d       	adc	r31, r1
 266:	80 81       	ld	r24, Z
 268:	0e 94 74 00 	call	0xe8	; 0xe8 <lcdData>
    }
    
    // Display on the second line!
    if (len > 16) {
        lcd_set_position(1, 2);
        for (unsigned char i = 16; i < len; ++i) {
 26c:	cf 5f       	subi	r28, 0xFF	; 255
 26e:	cd 17       	cp	r28, r29
 270:	b8 f3       	brcs	.-18     	; 0x260 <lcd_write+0x54>
            lcdData(str[i]);
        }
    }
}
 272:	df 91       	pop	r29
 274:	cf 91       	pop	r28
 276:	1f 91       	pop	r17
 278:	0f 91       	pop	r16
 27a:	08 95       	ret

0000027c <main>:

int main (void) {
    lcd_init();
 27c:	0e 94 97 00 	call	0x12e	; 0x12e <lcd_init>
    lcd_write("Hello!");
 280:	81 e1       	ldi	r24, 0x11	; 17
 282:	91 e0       	ldi	r25, 0x01	; 1
 284:	0e 94 06 01 	call	0x20c	; 0x20c <lcd_write>
    
    while (1) {
        PORTD |= ~(1<<0);
 288:	8b b1       	in	r24, 0x0b	; 11
 28a:	8e 6f       	ori	r24, 0xFE	; 254
 28c:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 28e:	2f ef       	ldi	r18, 0xFF	; 255
 290:	83 ed       	ldi	r24, 0xD3	; 211
 292:	90 e3       	ldi	r25, 0x30	; 48
 294:	21 50       	subi	r18, 0x01	; 1
 296:	80 40       	sbci	r24, 0x00	; 0
 298:	90 40       	sbci	r25, 0x00	; 0
 29a:	e1 f7       	brne	.-8      	; 0x294 <main+0x18>
 29c:	00 c0       	rjmp	.+0      	; 0x29e <main+0x22>
 29e:	00 00       	nop
 2a0:	f3 cf       	rjmp	.-26     	; 0x288 <main+0xc>

000002a2 <_exit>:
 2a2:	f8 94       	cli

000002a4 <__stop_program>:
 2a4:	ff cf       	rjmp	.-2      	; 0x2a4 <__stop_program>
