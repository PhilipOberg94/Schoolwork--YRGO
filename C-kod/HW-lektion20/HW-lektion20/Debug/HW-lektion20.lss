
HW-lektion20.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000146  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000f2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000146  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000178  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  000001b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000729  00000000  00000000  000001f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000065b  00000000  00000000  00000921  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000028d  00000000  00000000  00000f7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000064  00000000  00000000  0000120c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000373  00000000  00000000  00001270  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000002d  00000000  00000000  000015e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001610  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 68 00 	call	0xd0	; 0xd0 <main>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <i2c_write>:
#include <avr/io.h>
#include <stdint.h>


void i2c_write (unsigned char data) {
    TWDR = data;
  80:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    TWCR = (1<<TWINT) | (1<<TWEN);
  84:	84 e8       	ldi	r24, 0x84	; 132
  86:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    while ((TWCR & (TWCR<<TWINT)) == 0);
  8a:	ec eb       	ldi	r30, 0xBC	; 188
  8c:	f0 e0       	ldi	r31, 0x00	; 0
  8e:	80 81       	ld	r24, Z
  90:	20 81       	ld	r18, Z
  92:	90 e8       	ldi	r25, 0x80	; 128
  94:	29 9f       	mul	r18, r25
  96:	90 01       	movw	r18, r0
  98:	11 24       	eor	r1, r1
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	82 23       	and	r24, r18
  9e:	93 23       	and	r25, r19
  a0:	89 2b       	or	r24, r25
  a2:	99 f3       	breq	.-26     	; 0x8a <i2c_write+0xa>
}
  a4:	08 95       	ret

000000a6 <i2c_start>:

void i2c_start () {
    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
  a6:	84 ea       	ldi	r24, 0xA4	; 164
  a8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    while ((TWCR & (1<<TWINT)) == 0);
  ac:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  b0:	88 23       	and	r24, r24
  b2:	e4 f7       	brge	.-8      	; 0xac <i2c_start+0x6>
}
  b4:	08 95       	ret

000000b6 <i2c_stop>:
void i2c_stop () {
    TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
  b6:	84 e9       	ldi	r24, 0x94	; 148
  b8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  bc:	08 95       	ret

000000be <i2c_init>:
}
void i2c_init () {
    TWSR=0x00;
  be:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
    TWBR=152;
  c2:	88 e9       	ldi	r24, 0x98	; 152
  c4:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
    TWCR=0x04;
  c8:	84 e0       	ldi	r24, 0x04	; 4
  ca:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  ce:	08 95       	ret

000000d0 <main>:
}

int main(void)
{
    DDRD = 0b11111111;
  d0:	8f ef       	ldi	r24, 0xFF	; 255
  d2:	8a b9       	out	0x0a, r24	; 10
    i2c_init();
  d4:	0e 94 5f 00 	call	0xbe	; 0xbe <i2c_init>
    while (1) {
        i2c_start();
  d8:	0e 94 53 00 	call	0xa6	; 0xa6 <i2c_start>
        i2c_write(0b11010000); //Write to SLAVE
  dc:	80 ed       	ldi	r24, 0xD0	; 208
  de:	0e 94 40 00 	call	0x80	; 0x80 <i2c_write>
        i2c_write(0b11110000); // Bytes sent
  e2:	80 ef       	ldi	r24, 0xF0	; 240
  e4:	0e 94 40 00 	call	0x80	; 0x80 <i2c_write>
        i2c_stop();
  e8:	0e 94 5b 00 	call	0xb6	; 0xb6 <i2c_stop>
  ec:	f5 cf       	rjmp	.-22     	; 0xd8 <main+0x8>

000000ee <_exit>:
  ee:	f8 94       	cli

000000f0 <__stop_program>:
  f0:	ff cf       	rjmp	.-2      	; 0xf0 <__stop_program>
