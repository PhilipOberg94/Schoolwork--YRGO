
I2C_Communication.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000005e  00800100  000006a6  0000073a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006a6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  0080015e  0080015e  00000798  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000798  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000007c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  00000808  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000015f1  00000000  00000000  000008e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000095a  00000000  00000000  00001ed1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000099b  00000000  00000000  0000282b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e8  00000000  00000000  000031c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000059c  00000000  00000000  000033b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b54  00000000  00000000  0000394c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  000044a0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 ea       	ldi	r30, 0xA6	; 166
  7c:	f6 e0       	ldi	r31, 0x06	; 6
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 35       	cpi	r26, 0x5E	; 94
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ae e5       	ldi	r26, 0x5E	; 94
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 36       	cpi	r26, 0x64	; 100
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 60 00 	call	0xc0	; 0xc0 <main>
  9e:	0c 94 51 03 	jmp	0x6a2	; 0x6a2 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <lcd_display_time>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a6:	cf 93       	push	r28
  a8:	c6 2f       	mov	r28, r22
  aa:	0e 94 82 02 	call	0x504	; 0x504 <printhex_to_ascii>
  ae:	82 e4       	ldi	r24, 0x42	; 66
  b0:	91 e0       	ldi	r25, 0x01	; 1
  b2:	0e 94 6f 02 	call	0x4de	; 0x4de <lcd_print>
  b6:	8c 2f       	mov	r24, r28
  b8:	0e 94 82 02 	call	0x504	; 0x504 <printhex_to_ascii>
  bc:	cf 91       	pop	r28
  be:	08 95       	ret

000000c0 <main>:
        presstime = 0;*/
    }
}

int main(void)
{
  c0:	cf 93       	push	r28
  c2:	df 93       	push	r29
  c4:	00 d0       	rcall	.+0      	; 0xc6 <main+0x6>
  c6:	1f 92       	push	r1
  c8:	cd b7       	in	r28, 0x3d	; 61
  ca:	de b7       	in	r29, 0x3e	; 62
    DDRD = 0xFF;
  cc:	8f ef       	ldi	r24, 0xFF	; 255
  ce:	8a b9       	out	0x0a, r24	; 10
    DDRB = 0xFF;
  d0:	84 b9       	out	0x04, r24	; 4
    DDRC = 0x00;
  d2:	17 b8       	out	0x07, r1	; 7
    PORTC= 0b00000001;
  d4:	81 e0       	ldi	r24, 0x01	; 1
  d6:	88 b9       	out	0x08, r24	; 8
    unsigned char hour,min,sec;
    hour = 0x12;
  d8:	82 e1       	ldi	r24, 0x12	; 18
  da:	89 83       	std	Y+1, r24	; 0x01
    min = 0x00;
  dc:	1a 82       	std	Y+2, r1	; 0x02
    sec = 0x00;
  de:	1b 82       	std	Y+3, r1	; 0x03
    lcd_init();
  e0:	0e 94 27 02 	call	0x44e	; 0x44e <lcd_init>
    lcdclear ();
  e4:	0e 94 9b 02 	call	0x536	; 0x536 <lcdclear>
    
    rtc_init();
  e8:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <rtc_init>
        //_delay_ms(1000);
        //PORTD = (0<<1);
        //_delay_ms(1000);
        
            
        if (menu_int == 0) {
  ec:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  f0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  f4:	89 2b       	or	r24, r25
  f6:	09 f0       	breq	.+2      	; 0xfa <main+0x3a>
  f8:	47 c0       	rjmp	.+142    	; 0x188 <main+0xc8>
            lcd_setcursor(1,1);
  fa:	61 e0       	ldi	r22, 0x01	; 1
  fc:	81 e0       	ldi	r24, 0x01	; 1
  fe:	0e 94 46 02 	call	0x48c	; 0x48c <lcd_setcursor>
            lcd_print("Set time:");
 102:	8a e3       	ldi	r24, 0x3A	; 58
 104:	91 e0       	ldi	r25, 0x01	; 1
 106:	0e 94 6f 02 	call	0x4de	; 0x4de <lcd_print>
            
            
            
            if (read_analogue_input(0)< 400 && read_analogue_input(0) > 200){
 10a:	80 e0       	ldi	r24, 0x00	; 0
 10c:	0e 94 3f 03 	call	0x67e	; 0x67e <read_analogue_input>
 110:	80 39       	cpi	r24, 0x90	; 144
 112:	91 40       	sbci	r25, 0x01	; 1
 114:	98 f4       	brcc	.+38     	; 0x13c <main+0x7c>
 116:	80 e0       	ldi	r24, 0x00	; 0
 118:	0e 94 3f 03 	call	0x67e	; 0x67e <read_analogue_input>
 11c:	89 3c       	cpi	r24, 0xC9	; 201
 11e:	91 05       	cpc	r25, r1
 120:	68 f0       	brcs	.+26     	; 0x13c <main+0x7c>
                min--;
 122:	8a 81       	ldd	r24, Y+2	; 0x02
 124:	81 50       	subi	r24, 0x01	; 1
 126:	8a 83       	std	Y+2, r24	; 0x02
 128:	8f ef       	ldi	r24, 0xFF	; 255
 12a:	90 e7       	ldi	r25, 0x70	; 112
 12c:	22 e0       	ldi	r18, 0x02	; 2
 12e:	81 50       	subi	r24, 0x01	; 1
 130:	90 40       	sbci	r25, 0x00	; 0
 132:	20 40       	sbci	r18, 0x00	; 0
 134:	e1 f7       	brne	.-8      	; 0x12e <main+0x6e>
 136:	00 c0       	rjmp	.+0      	; 0x138 <main+0x78>
 138:	00 00       	nop
 13a:	18 c0       	rjmp	.+48     	; 0x16c <main+0xac>
                _delay_ms(50);
            }
            else if (read_analogue_input(0) > 740 && read_analogue_input(0) < 800) {
 13c:	80 e0       	ldi	r24, 0x00	; 0
 13e:	0e 94 3f 03 	call	0x67e	; 0x67e <read_analogue_input>
 142:	85 3e       	cpi	r24, 0xE5	; 229
 144:	92 40       	sbci	r25, 0x02	; 2
 146:	90 f0       	brcs	.+36     	; 0x16c <main+0xac>
 148:	80 e0       	ldi	r24, 0x00	; 0
 14a:	0e 94 3f 03 	call	0x67e	; 0x67e <read_analogue_input>
 14e:	80 32       	cpi	r24, 0x20	; 32
 150:	93 40       	sbci	r25, 0x03	; 3
 152:	60 f4       	brcc	.+24     	; 0x16c <main+0xac>
                min++;
 154:	8a 81       	ldd	r24, Y+2	; 0x02
 156:	8f 5f       	subi	r24, 0xFF	; 255
 158:	8a 83       	std	Y+2, r24	; 0x02
 15a:	8f ef       	ldi	r24, 0xFF	; 255
 15c:	90 e7       	ldi	r25, 0x70	; 112
 15e:	22 e0       	ldi	r18, 0x02	; 2
 160:	81 50       	subi	r24, 0x01	; 1
 162:	90 40       	sbci	r25, 0x00	; 0
 164:	20 40       	sbci	r18, 0x00	; 0
 166:	e1 f7       	brne	.-8      	; 0x160 <main+0xa0>
 168:	00 c0       	rjmp	.+0      	; 0x16a <main+0xaa>
 16a:	00 00       	nop
 16c:	8f ef       	ldi	r24, 0xFF	; 255
 16e:	91 ee       	ldi	r25, 0xE1	; 225
 170:	24 e0       	ldi	r18, 0x04	; 4
 172:	81 50       	subi	r24, 0x01	; 1
 174:	90 40       	sbci	r25, 0x00	; 0
 176:	20 40       	sbci	r18, 0x00	; 0
 178:	e1 f7       	brne	.-8      	; 0x172 <main+0xb2>
 17a:	00 c0       	rjmp	.+0      	; 0x17c <main+0xbc>
 17c:	00 00       	nop
                _delay_ms(50);
            }
            
            
            _delay_ms(100);
            rtc_setTime(hour, min, sec);
 17e:	4b 81       	ldd	r20, Y+3	; 0x03
 180:	6a 81       	ldd	r22, Y+2	; 0x02
 182:	89 81       	ldd	r24, Y+1	; 0x01
 184:	0e 94 f6 02 	call	0x5ec	; 0x5ec <rtc_setTime>
        }
        
        
        
        if (menu_int == 1) {
 188:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 18c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 190:	01 97       	sbiw	r24, 0x01	; 1
 192:	09 f0       	breq	.+2      	; 0x196 <main+0xd6>
 194:	7a c0       	rjmp	.+244    	; 0x28a <main+0x1ca>
            
            
            lcd_setcursor(1,1);
 196:	61 e0       	ldi	r22, 0x01	; 1
 198:	81 e0       	ldi	r24, 0x01	; 1
 19a:	0e 94 46 02 	call	0x48c	; 0x48c <lcd_setcursor>
            lcd_print("Box 1&5 ");
 19e:	84 e4       	ldi	r24, 0x44	; 68
 1a0:	91 e0       	ldi	r25, 0x01	; 1
 1a2:	0e 94 6f 02 	call	0x4de	; 0x4de <lcd_print>
            lcd_setcursor(1,2);
 1a6:	62 e0       	ldi	r22, 0x02	; 2
 1a8:	81 e0       	ldi	r24, 0x01	; 1
 1aa:	0e 94 46 02 	call	0x48c	; 0x48c <lcd_setcursor>
            printhex_to_ascii(hour_array[hour_int]);
 1ae:	e0 91 60 01 	lds	r30, 0x0160	; 0x800160 <hour_int>
 1b2:	f0 91 61 01 	lds	r31, 0x0161	; 0x800161 <hour_int+0x1>
 1b6:	ee 0f       	add	r30, r30
 1b8:	ff 1f       	adc	r31, r31
 1ba:	ee 5f       	subi	r30, 0xFE	; 254
 1bc:	fe 4f       	sbci	r31, 0xFE	; 254
 1be:	80 81       	ld	r24, Z
 1c0:	0e 94 82 02 	call	0x504	; 0x504 <printhex_to_ascii>
            lcd_print(":");
 1c4:	82 e4       	ldi	r24, 0x42	; 66
 1c6:	91 e0       	ldi	r25, 0x01	; 1
 1c8:	0e 94 6f 02 	call	0x4de	; 0x4de <lcd_print>
            printhex_to_ascii(min_array[min_int]);
 1cc:	e0 91 62 01 	lds	r30, 0x0162	; 0x800162 <min_int>
 1d0:	f0 91 63 01 	lds	r31, 0x0163	; 0x800163 <min_int+0x1>
 1d4:	ee 0f       	add	r30, r30
 1d6:	ff 1f       	adc	r31, r31
 1d8:	ee 5c       	subi	r30, 0xCE	; 206
 1da:	fe 4f       	sbci	r31, 0xFE	; 254
 1dc:	80 81       	ld	r24, Z
 1de:	0e 94 82 02 	call	0x504	; 0x504 <printhex_to_ascii>
            box1n5_array [0] = (hour_array [hour_int]);
 1e2:	e0 91 60 01 	lds	r30, 0x0160	; 0x800160 <hour_int>
 1e6:	f0 91 61 01 	lds	r31, 0x0161	; 0x800161 <hour_int+0x1>
 1ea:	ee 0f       	add	r30, r30
 1ec:	ff 1f       	adc	r31, r31
 1ee:	ee 5f       	subi	r30, 0xFE	; 254
 1f0:	fe 4f       	sbci	r31, 0xFE	; 254
 1f2:	80 81       	ld	r24, Z
 1f4:	ae e5       	ldi	r26, 0x5E	; 94
 1f6:	b1 e0       	ldi	r27, 0x01	; 1
 1f8:	8c 93       	st	X, r24
            box1n5_array [1] = (min_array [min_int]);
 1fa:	e0 91 62 01 	lds	r30, 0x0162	; 0x800162 <min_int>
 1fe:	f0 91 63 01 	lds	r31, 0x0163	; 0x800163 <min_int+0x1>
 202:	ee 0f       	add	r30, r30
 204:	ff 1f       	adc	r31, r31
 206:	ee 5c       	subi	r30, 0xCE	; 206
 208:	fe 4f       	sbci	r31, 0xFE	; 254
 20a:	80 81       	ld	r24, Z
 20c:	11 96       	adiw	r26, 0x01	; 1
 20e:	8c 93       	st	X, r24
            
            
            if (read_analogue_input(0)< 400 && read_analogue_input(0) > 200) {
 210:	80 e0       	ldi	r24, 0x00	; 0
 212:	0e 94 3f 03 	call	0x67e	; 0x67e <read_analogue_input>
 216:	80 39       	cpi	r24, 0x90	; 144
 218:	91 40       	sbci	r25, 0x01	; 1
 21a:	c8 f4       	brcc	.+50     	; 0x24e <main+0x18e>
 21c:	80 e0       	ldi	r24, 0x00	; 0
 21e:	0e 94 3f 03 	call	0x67e	; 0x67e <read_analogue_input>
 222:	89 3c       	cpi	r24, 0xC9	; 201
 224:	91 05       	cpc	r25, r1
 226:	98 f0       	brcs	.+38     	; 0x24e <main+0x18e>
            min_int--;
 228:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <min_int>
 22c:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <min_int+0x1>
 230:	01 97       	sbiw	r24, 0x01	; 1
 232:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <min_int+0x1>
 236:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <min_int>
 23a:	8f ef       	ldi	r24, 0xFF	; 255
 23c:	91 ee       	ldi	r25, 0xE1	; 225
 23e:	24 e0       	ldi	r18, 0x04	; 4
 240:	81 50       	subi	r24, 0x01	; 1
 242:	90 40       	sbci	r25, 0x00	; 0
 244:	20 40       	sbci	r18, 0x00	; 0
 246:	e1 f7       	brne	.-8      	; 0x240 <main+0x180>
 248:	00 c0       	rjmp	.+0      	; 0x24a <main+0x18a>
 24a:	00 00       	nop
 24c:	1e c0       	rjmp	.+60     	; 0x28a <main+0x1ca>
            _delay_ms(100);
            }
            else if (read_analogue_input(0) > 740 && read_analogue_input(0) < 800) {
 24e:	80 e0       	ldi	r24, 0x00	; 0
 250:	0e 94 3f 03 	call	0x67e	; 0x67e <read_analogue_input>
 254:	85 3e       	cpi	r24, 0xE5	; 229
 256:	92 40       	sbci	r25, 0x02	; 2
 258:	c0 f0       	brcs	.+48     	; 0x28a <main+0x1ca>
 25a:	80 e0       	ldi	r24, 0x00	; 0
 25c:	0e 94 3f 03 	call	0x67e	; 0x67e <read_analogue_input>
 260:	80 32       	cpi	r24, 0x20	; 32
 262:	93 40       	sbci	r25, 0x03	; 3
 264:	90 f4       	brcc	.+36     	; 0x28a <main+0x1ca>
            min_int++;
 266:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <min_int>
 26a:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <min_int+0x1>
 26e:	01 96       	adiw	r24, 0x01	; 1
 270:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <min_int+0x1>
 274:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <min_int>
 278:	8f ef       	ldi	r24, 0xFF	; 255
 27a:	91 ee       	ldi	r25, 0xE1	; 225
 27c:	24 e0       	ldi	r18, 0x04	; 4
 27e:	81 50       	subi	r24, 0x01	; 1
 280:	90 40       	sbci	r25, 0x00	; 0
 282:	20 40       	sbci	r18, 0x00	; 0
 284:	e1 f7       	brne	.-8      	; 0x27e <main+0x1be>
 286:	00 c0       	rjmp	.+0      	; 0x288 <main+0x1c8>
 288:	00 00       	nop
        //menu_int = 0;
        //}
        //if (menu_int < 1) {
        //menu_int = 4;
        //}
        if (min_int > 3) {
 28a:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <min_int>
 28e:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <min_int+0x1>
 292:	04 97       	sbiw	r24, 0x04	; 4
 294:	6c f0       	brlt	.+26     	; 0x2b0 <main+0x1f0>
            min_int = 0;
 296:	10 92 63 01 	sts	0x0163, r1	; 0x800163 <min_int+0x1>
 29a:	10 92 62 01 	sts	0x0162, r1	; 0x800162 <min_int>
            hour_int++;
 29e:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <hour_int>
 2a2:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <hour_int+0x1>
 2a6:	01 96       	adiw	r24, 0x01	; 1
 2a8:	90 93 61 01 	sts	0x0161, r25	; 0x800161 <hour_int+0x1>
 2ac:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <hour_int>
        }
        if (min_int < 0) {
 2b0:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <min_int>
 2b4:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <min_int+0x1>
 2b8:	99 23       	and	r25, r25
 2ba:	7c f4       	brge	.+30     	; 0x2da <main+0x21a>
            min_int = 3;
 2bc:	83 e0       	ldi	r24, 0x03	; 3
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <min_int+0x1>
 2c4:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <min_int>
            hour_int--;
 2c8:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <hour_int>
 2cc:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <hour_int+0x1>
 2d0:	01 97       	sbiw	r24, 0x01	; 1
 2d2:	90 93 61 01 	sts	0x0161, r25	; 0x800161 <hour_int+0x1>
 2d6:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <hour_int>
        }
        if (hour_int < 0) {
 2da:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <hour_int>
 2de:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <hour_int+0x1>
 2e2:	99 23       	and	r25, r25
 2e4:	34 f4       	brge	.+12     	; 0x2f2 <main+0x232>
            hour_int = 23;
 2e6:	87 e1       	ldi	r24, 0x17	; 23
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	90 93 61 01 	sts	0x0161, r25	; 0x800161 <hour_int+0x1>
 2ee:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <hour_int>
        }
        if (hour_int > 23) {
 2f2:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <hour_int>
 2f6:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <hour_int+0x1>
 2fa:	48 97       	sbiw	r24, 0x18	; 24
 2fc:	24 f0       	brlt	.+8      	; 0x306 <main+0x246>
            hour_int = 0;
 2fe:	10 92 61 01 	sts	0x0161, r1	; 0x800161 <hour_int+0x1>
 302:	10 92 60 01 	sts	0x0160, r1	; 0x800160 <hour_int>
        }
        if (min < 0x01) {
 306:	8a 81       	ldd	r24, Y+2	; 0x02
 308:	81 11       	cpse	r24, r1
 30a:	05 c0       	rjmp	.+10     	; 0x316 <main+0x256>
            min = 0x59;
 30c:	89 e5       	ldi	r24, 0x59	; 89
 30e:	8a 83       	std	Y+2, r24	; 0x02
            hour--;
 310:	89 81       	ldd	r24, Y+1	; 0x01
 312:	81 50       	subi	r24, 0x01	; 1
 314:	89 83       	std	Y+1, r24	; 0x01
        }
        if (min > 0x59) {
 316:	8a 81       	ldd	r24, Y+2	; 0x02
 318:	8a 35       	cpi	r24, 0x5A	; 90
 31a:	20 f0       	brcs	.+8      	; 0x324 <main+0x264>
            min = 0x00;
 31c:	1a 82       	std	Y+2, r1	; 0x02
            hour++;
 31e:	89 81       	ldd	r24, Y+1	; 0x01
 320:	8f 5f       	subi	r24, 0xFF	; 255
 322:	89 83       	std	Y+1, r24	; 0x01
        }
        if (hour < 0x00) {
            hour = 0x23;
        }
        if (hour > 0x23) {
 324:	89 81       	ldd	r24, Y+1	; 0x01
 326:	84 32       	cpi	r24, 0x24	; 36
 328:	08 f0       	brcs	.+2      	; 0x32c <main+0x26c>
            hour = 0x00;
 32a:	19 82       	std	Y+1, r1	; 0x01
        }
        rtc_getTime(&hour, &min, &sec);
 32c:	ae 01       	movw	r20, r28
 32e:	4d 5f       	subi	r20, 0xFD	; 253
 330:	5f 4f       	sbci	r21, 0xFF	; 255
 332:	be 01       	movw	r22, r28
 334:	6e 5f       	subi	r22, 0xFE	; 254
 336:	7f 4f       	sbci	r23, 0xFF	; 255
 338:	ce 01       	movw	r24, r28
 33a:	01 96       	adiw	r24, 0x01	; 1
 33c:	0e 94 10 03 	call	0x620	; 0x620 <rtc_getTime>
 340:	8f ef       	ldi	r24, 0xFF	; 255
 342:	91 ee       	ldi	r25, 0xE1	; 225
 344:	24 e0       	ldi	r18, 0x04	; 4
 346:	81 50       	subi	r24, 0x01	; 1
 348:	90 40       	sbci	r25, 0x00	; 0
 34a:	20 40       	sbci	r18, 0x00	; 0
 34c:	e1 f7       	brne	.-8      	; 0x346 <main+0x286>
 34e:	00 c0       	rjmp	.+0      	; 0x350 <main+0x290>
 350:	00 00       	nop
        _delay_ms(100);
        lcd_setcursor(12,1);
 352:	61 e0       	ldi	r22, 0x01	; 1
 354:	8c e0       	ldi	r24, 0x0C	; 12
 356:	0e 94 46 02 	call	0x48c	; 0x48c <lcd_setcursor>
        lcd_display_time(hour,min);
 35a:	6a 81       	ldd	r22, Y+2	; 0x02
 35c:	89 81       	ldd	r24, Y+1	; 0x01
 35e:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_display_time>
        //hold_button(read_analogue_input(0));
        
    }
 362:	c4 ce       	rjmp	.-632    	; 0xec <main+0x2c>

00000364 <lcdCOmmand>:

#include "RTC_LCD.h"
#include <stdlib.h>

void lcdCOmmand(unsigned char cmnd) {
    PORTD = cmnd & 0xF0;
 364:	98 2f       	mov	r25, r24
 366:	90 7f       	andi	r25, 0xF0	; 240
 368:	9b b9       	out	0x0b, r25	; 11
    PORTB &= ~ (1<<LCD_RS);
 36a:	95 b1       	in	r25, 0x05	; 5
 36c:	9e 7f       	andi	r25, 0xFE	; 254
 36e:	95 b9       	out	0x05, r25	; 5
    PORTB &= ~ (1<<LCD_RW);
 370:	95 b1       	in	r25, 0x05	; 5
 372:	9d 7f       	andi	r25, 0xFD	; 253
 374:	95 b9       	out	0x05, r25	; 5
    PORTB |= (1<<LCD_EN);
 376:	95 b1       	in	r25, 0x05	; 5
 378:	94 60       	ori	r25, 0x04	; 4
 37a:	95 b9       	out	0x05, r25	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 37c:	95 e3       	ldi	r25, 0x35	; 53
 37e:	9a 95       	dec	r25
 380:	f1 f7       	brne	.-4      	; 0x37e <lcdCOmmand+0x1a>
 382:	00 00       	nop
    _delay_us(10);
    PORTB &= ~(1<<LCD_EN);
 384:	95 b1       	in	r25, 0x05	; 5
 386:	9b 7f       	andi	r25, 0xFB	; 251
 388:	95 b9       	out	0x05, r25	; 5
 38a:	ef ed       	ldi	r30, 0xDF	; 223
 38c:	fe e2       	ldi	r31, 0x2E	; 46
 38e:	31 97       	sbiw	r30, 0x01	; 1
 390:	f1 f7       	brne	.-4      	; 0x38e <lcdCOmmand+0x2a>
 392:	00 c0       	rjmp	.+0      	; 0x394 <lcdCOmmand+0x30>
 394:	00 00       	nop
    _delay_us(3000);
    
    PORTD = cmnd<<4;
 396:	82 95       	swap	r24
 398:	80 7f       	andi	r24, 0xF0	; 240
 39a:	8b b9       	out	0x0b, r24	; 11
    PORTB |= (1<<LCD_EN);
 39c:	85 b1       	in	r24, 0x05	; 5
 39e:	84 60       	ori	r24, 0x04	; 4
 3a0:	85 b9       	out	0x05, r24	; 5
 3a2:	f5 e3       	ldi	r31, 0x35	; 53
 3a4:	fa 95       	dec	r31
 3a6:	f1 f7       	brne	.-4      	; 0x3a4 <lcdCOmmand+0x40>
 3a8:	00 00       	nop
    _delay_us(10);
    PORTB &= ~ (1<<LCD_EN);
 3aa:	85 b1       	in	r24, 0x05	; 5
 3ac:	8b 7f       	andi	r24, 0xFB	; 251
 3ae:	85 b9       	out	0x05, r24	; 5
 3b0:	8f ed       	ldi	r24, 0xDF	; 223
 3b2:	9e e2       	ldi	r25, 0x2E	; 46
 3b4:	01 97       	sbiw	r24, 0x01	; 1
 3b6:	f1 f7       	brne	.-4      	; 0x3b4 <lcdCOmmand+0x50>
 3b8:	00 c0       	rjmp	.+0      	; 0x3ba <lcdCOmmand+0x56>
 3ba:	00 00       	nop
 3bc:	08 95       	ret

000003be <lcdData>:
    _delay_us(3000);
}

void lcdData(unsigned char data) {
    PORTD = data & 0xF0;
 3be:	98 2f       	mov	r25, r24
 3c0:	90 7f       	andi	r25, 0xF0	; 240
 3c2:	9b b9       	out	0x0b, r25	; 11
    PORTB |= (1<<LCD_RS);
 3c4:	95 b1       	in	r25, 0x05	; 5
 3c6:	91 60       	ori	r25, 0x01	; 1
 3c8:	95 b9       	out	0x05, r25	; 5
    //PORTB &= ~ (1<<LCD_RW);
    PORTB |= (1<<LCD_EN);
 3ca:	95 b1       	in	r25, 0x05	; 5
 3cc:	94 60       	ori	r25, 0x04	; 4
 3ce:	95 b9       	out	0x05, r25	; 5
 3d0:	95 e3       	ldi	r25, 0x35	; 53
 3d2:	9a 95       	dec	r25
 3d4:	f1 f7       	brne	.-4      	; 0x3d2 <lcdData+0x14>
 3d6:	00 00       	nop
    _delay_us(10);
    PORTB &= ~ (1<<LCD_EN);
 3d8:	95 b1       	in	r25, 0x05	; 5
 3da:	9b 7f       	andi	r25, 0xFB	; 251
 3dc:	95 b9       	out	0x05, r25	; 5
    PORTD = data<<4;
 3de:	82 95       	swap	r24
 3e0:	80 7f       	andi	r24, 0xF0	; 240
 3e2:	8b b9       	out	0x0b, r24	; 11
    PORTB |= (1<<LCD_EN);
 3e4:	85 b1       	in	r24, 0x05	; 5
 3e6:	84 60       	ori	r24, 0x04	; 4
 3e8:	85 b9       	out	0x05, r24	; 5
 3ea:	85 e3       	ldi	r24, 0x35	; 53
 3ec:	8a 95       	dec	r24
 3ee:	f1 f7       	brne	.-4      	; 0x3ec <lcdData+0x2e>
 3f0:	00 00       	nop
    _delay_us(10);
    PORTB &= ~ (1<<LCD_EN);
 3f2:	85 b1       	in	r24, 0x05	; 5
 3f4:	8b 7f       	andi	r24, 0xFB	; 251
 3f6:	85 b9       	out	0x05, r24	; 5
 3f8:	8f e9       	ldi	r24, 0x9F	; 159
 3fa:	9f e0       	ldi	r25, 0x0F	; 15
 3fc:	01 97       	sbiw	r24, 0x01	; 1
 3fe:	f1 f7       	brne	.-4      	; 0x3fc <lcdData+0x3e>
 400:	00 c0       	rjmp	.+0      	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
 402:	00 00       	nop
 404:	08 95       	ret

00000406 <lcddigit>:
    _delay_us(1000);
}
void lcddigit (uint8_t data) {
    PORTD = data & 0xF0;
 406:	98 2f       	mov	r25, r24
 408:	90 7f       	andi	r25, 0xF0	; 240
 40a:	9b b9       	out	0x0b, r25	; 11
    PORTB |= (1<<LCD_RS);
 40c:	95 b1       	in	r25, 0x05	; 5
 40e:	91 60       	ori	r25, 0x01	; 1
 410:	95 b9       	out	0x05, r25	; 5
    PORTB |= (1<<LCD_EN);
 412:	95 b1       	in	r25, 0x05	; 5
 414:	94 60       	ori	r25, 0x04	; 4
 416:	95 b9       	out	0x05, r25	; 5
 418:	95 e3       	ldi	r25, 0x35	; 53
 41a:	9a 95       	dec	r25
 41c:	f1 f7       	brne	.-4      	; 0x41a <lcddigit+0x14>
 41e:	00 00       	nop
    _delay_us(10);
    PORTB &= ~ (1<<LCD_EN);
 420:	95 b1       	in	r25, 0x05	; 5
 422:	9b 7f       	andi	r25, 0xFB	; 251
 424:	95 b9       	out	0x05, r25	; 5
    PORTD = data<<4;
 426:	82 95       	swap	r24
 428:	80 7f       	andi	r24, 0xF0	; 240
 42a:	8b b9       	out	0x0b, r24	; 11
    PORTB |= (1<<LCD_EN);
 42c:	85 b1       	in	r24, 0x05	; 5
 42e:	84 60       	ori	r24, 0x04	; 4
 430:	85 b9       	out	0x05, r24	; 5
 432:	85 e3       	ldi	r24, 0x35	; 53
 434:	8a 95       	dec	r24
 436:	f1 f7       	brne	.-4      	; 0x434 <lcddigit+0x2e>
 438:	00 00       	nop
    _delay_us(10);
    PORTB &= ~ (1<<LCD_EN);
 43a:	85 b1       	in	r24, 0x05	; 5
 43c:	8b 7f       	andi	r24, 0xFB	; 251
 43e:	85 b9       	out	0x05, r24	; 5
 440:	8f e9       	ldi	r24, 0x9F	; 159
 442:	9f e0       	ldi	r25, 0x0F	; 15
 444:	01 97       	sbiw	r24, 0x01	; 1
 446:	f1 f7       	brne	.-4      	; 0x444 <lcddigit+0x3e>
 448:	00 c0       	rjmp	.+0      	; 0x44a <lcddigit+0x44>
 44a:	00 00       	nop
 44c:	08 95       	ret

0000044e <lcd_init>:
    _delay_us(1000);
}

void lcd_init() {
    DDRD = 0xFF;
 44e:	8f ef       	ldi	r24, 0xFF	; 255
 450:	8a b9       	out	0x0a, r24	; 10
    DDRB = 0xFF;
 452:	84 b9       	out	0x04, r24	; 4
    PORTB &=~(1<<LCD_EN);
 454:	85 b1       	in	r24, 0x05	; 5
 456:	8b 7f       	andi	r24, 0xFB	; 251
 458:	85 b9       	out	0x05, r24	; 5
    lcdCOmmand(0x33);
 45a:	83 e3       	ldi	r24, 0x33	; 51
 45c:	0e 94 b2 01 	call	0x364	; 0x364 <lcdCOmmand>
    lcdCOmmand(0x32);
 460:	82 e3       	ldi	r24, 0x32	; 50
 462:	0e 94 b2 01 	call	0x364	; 0x364 <lcdCOmmand>
    lcdCOmmand(0x28);
 466:	88 e2       	ldi	r24, 0x28	; 40
 468:	0e 94 b2 01 	call	0x364	; 0x364 <lcdCOmmand>
    lcdCOmmand(0x0e);
 46c:	8e e0       	ldi	r24, 0x0E	; 14
 46e:	0e 94 b2 01 	call	0x364	; 0x364 <lcdCOmmand>
    lcdCOmmand(0x01);
 472:	81 e0       	ldi	r24, 0x01	; 1
 474:	0e 94 b2 01 	call	0x364	; 0x364 <lcdCOmmand>
 478:	8f e3       	ldi	r24, 0x3F	; 63
 47a:	9f e1       	ldi	r25, 0x1F	; 31
 47c:	01 97       	sbiw	r24, 0x01	; 1
 47e:	f1 f7       	brne	.-4      	; 0x47c <lcd_init+0x2e>
 480:	00 c0       	rjmp	.+0      	; 0x482 <lcd_init+0x34>
 482:	00 00       	nop
    _delay_us(2000);
    lcdCOmmand(0x06);
 484:	86 e0       	ldi	r24, 0x06	; 6
 486:	0e 94 b2 01 	call	0x364	; 0x364 <lcdCOmmand>
 48a:	08 95       	ret

0000048c <lcd_setcursor>:
}

void lcd_setcursor (unsigned char x, unsigned char y) {
 48c:	cf 93       	push	r28
 48e:	df 93       	push	r29
 490:	00 d0       	rcall	.+0      	; 0x492 <lcd_setcursor+0x6>
 492:	00 d0       	rcall	.+0      	; 0x494 <lcd_setcursor+0x8>
 494:	cd b7       	in	r28, 0x3d	; 61
 496:	de b7       	in	r29, 0x3e	; 62
    unsigned char firstCharAdr[] = {0x80,0xC0,0x94,0xD4};
 498:	90 e8       	ldi	r25, 0x80	; 128
 49a:	99 83       	std	Y+1, r25	; 0x01
 49c:	90 ec       	ldi	r25, 0xC0	; 192
 49e:	9a 83       	std	Y+2, r25	; 0x02
 4a0:	94 e9       	ldi	r25, 0x94	; 148
 4a2:	9b 83       	std	Y+3, r25	; 0x03
 4a4:	94 ed       	ldi	r25, 0xD4	; 212
 4a6:	9c 83       	std	Y+4, r25	; 0x04
    lcdCOmmand(firstCharAdr[y-1]+x-1);
 4a8:	e6 2f       	mov	r30, r22
 4aa:	f0 e0       	ldi	r31, 0x00	; 0
 4ac:	31 97       	sbiw	r30, 0x01	; 1
 4ae:	21 e0       	ldi	r18, 0x01	; 1
 4b0:	30 e0       	ldi	r19, 0x00	; 0
 4b2:	2c 0f       	add	r18, r28
 4b4:	3d 1f       	adc	r19, r29
 4b6:	e2 0f       	add	r30, r18
 4b8:	f3 1f       	adc	r31, r19
 4ba:	90 81       	ld	r25, Z
 4bc:	89 0f       	add	r24, r25
 4be:	81 50       	subi	r24, 0x01	; 1
 4c0:	0e 94 b2 01 	call	0x364	; 0x364 <lcdCOmmand>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4c4:	8f e9       	ldi	r24, 0x9F	; 159
 4c6:	9f e0       	ldi	r25, 0x0F	; 15
 4c8:	01 97       	sbiw	r24, 0x01	; 1
 4ca:	f1 f7       	brne	.-4      	; 0x4c8 <lcd_setcursor+0x3c>
 4cc:	00 c0       	rjmp	.+0      	; 0x4ce <lcd_setcursor+0x42>
 4ce:	00 00       	nop
    _delay_ms(1);
}
 4d0:	0f 90       	pop	r0
 4d2:	0f 90       	pop	r0
 4d4:	0f 90       	pop	r0
 4d6:	0f 90       	pop	r0
 4d8:	df 91       	pop	r29
 4da:	cf 91       	pop	r28
 4dc:	08 95       	ret

000004de <lcd_print>:

void lcd_print(char * str) {
 4de:	0f 93       	push	r16
 4e0:	1f 93       	push	r17
 4e2:	cf 93       	push	r28
 4e4:	8c 01       	movw	r16, r24
    unsigned char i = 0;
 4e6:	c0 e0       	ldi	r28, 0x00	; 0
    
    while(str[i] != 0) {
 4e8:	03 c0       	rjmp	.+6      	; 0x4f0 <lcd_print+0x12>
        lcdData(str[i]);
 4ea:	0e 94 df 01 	call	0x3be	; 0x3be <lcdData>
        i++;
 4ee:	cf 5f       	subi	r28, 0xFF	; 255
}

void lcd_print(char * str) {
    unsigned char i = 0;
    
    while(str[i] != 0) {
 4f0:	f8 01       	movw	r30, r16
 4f2:	ec 0f       	add	r30, r28
 4f4:	f1 1d       	adc	r31, r1
 4f6:	80 81       	ld	r24, Z
 4f8:	81 11       	cpse	r24, r1
 4fa:	f7 cf       	rjmp	.-18     	; 0x4ea <lcd_print+0xc>
        lcdData(str[i]);
        i++;
    }
}
 4fc:	cf 91       	pop	r28
 4fe:	1f 91       	pop	r17
 500:	0f 91       	pop	r16
 502:	08 95       	ret

00000504 <printhex_to_ascii>:

void printhex_to_ascii (uint8_t data) {
 504:	cf 93       	push	r28
    uint8_t high_nibble = (data>>4);          // Extract high nibble
 506:	98 2f       	mov	r25, r24
 508:	92 95       	swap	r25
 50a:	9f 70       	andi	r25, 0x0F	; 15
    uint8_t low_nibble = (data & 0x0F);       // Extract low nibble
 50c:	c8 2f       	mov	r28, r24
 50e:	cf 70       	andi	r28, 0x0F	; 15
    uint8_t deciint = (high_nibble+=0x30);
 510:	80 e3       	ldi	r24, 0x30	; 48
 512:	89 0f       	add	r24, r25
    uint8_t singularint = (low_nibble+=0x30);
 514:	c0 5d       	subi	r28, 0xD0	; 208
    if (singularint < 48)
 516:	c0 33       	cpi	r28, 0x30	; 48
 518:	18 f4       	brcc	.+6      	; 0x520 <printhex_to_ascii+0x1c>
    {
        singularint= 57;
        deciint--;
 51a:	8f e2       	ldi	r24, 0x2F	; 47
 51c:	89 0f       	add	r24, r25
    uint8_t low_nibble = (data & 0x0F);       // Extract low nibble
    uint8_t deciint = (high_nibble+=0x30);
    uint8_t singularint = (low_nibble+=0x30);
    if (singularint < 48)
    {
        singularint= 57;
 51e:	c9 e3       	ldi	r28, 0x39	; 57
        deciint--;
    }
    if (singularint > 57) {
 520:	ca 33       	cpi	r28, 0x3A	; 58
 522:	10 f0       	brcs	.+4      	; 0x528 <printhex_to_ascii+0x24>
        singularint = 48;
        deciint++;
 524:	8f 5f       	subi	r24, 0xFF	; 255
    {
        singularint= 57;
        deciint--;
    }
    if (singularint > 57) {
        singularint = 48;
 526:	c0 e3       	ldi	r28, 0x30	; 48
        deciint++;
    }    
        lcddigit(deciint);                    //Print high ASCII nibbble
 528:	0e 94 03 02 	call	0x406	; 0x406 <lcddigit>
        lcddigit(singularint);                //Print low ASCII nibbble
 52c:	8c 2f       	mov	r24, r28
 52e:	0e 94 03 02 	call	0x406	; 0x406 <lcddigit>
}
 532:	cf 91       	pop	r28
 534:	08 95       	ret

00000536 <lcdclear>:

void lcdclear () {
    lcd_setcursor(0,0);
 536:	60 e0       	ldi	r22, 0x00	; 0
 538:	80 e0       	ldi	r24, 0x00	; 0
 53a:	0e 94 46 02 	call	0x48c	; 0x48c <lcd_setcursor>
    lcd_print("                ");
 53e:	8d e4       	ldi	r24, 0x4D	; 77
 540:	91 e0       	ldi	r25, 0x01	; 1
 542:	0e 94 6f 02 	call	0x4de	; 0x4de <lcd_print>
    lcd_setcursor(1,0);
 546:	60 e0       	ldi	r22, 0x00	; 0
 548:	81 e0       	ldi	r24, 0x01	; 1
 54a:	0e 94 46 02 	call	0x48c	; 0x48c <lcd_setcursor>
    lcd_print("                ");
 54e:	8d e4       	ldi	r24, 0x4D	; 77
 550:	91 e0       	ldi	r25, 0x01	; 1
 552:	0e 94 6f 02 	call	0x4de	; 0x4de <lcd_print>
 556:	08 95       	ret

00000558 <i2c_stop>:
}

void i2c_stop (){
    TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 558:	84 e9       	ldi	r24, 0x94	; 148
 55a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 55e:	08 95       	ret

00000560 <i2c_write>:
}

void i2c_write (unsigned char data) {
    TWDR = data;
 560:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    TWCR = (1<<TWINT) | (1<<TWEN);
 564:	84 e8       	ldi	r24, 0x84	; 132
 566:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    while (!(TWCR & (1<<TWINT)));
 56a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 56e:	88 23       	and	r24, r24
 570:	e4 f7       	brge	.-8      	; 0x56a <i2c_write+0xa>
}
 572:	08 95       	ret

00000574 <i2c_read>:

unsigned char i2c_read (unsigned char ackVal) {
TWCR = (1<<TWINT) | (1<<TWEN) | (ackVal<<TWEA);
 574:	20 e4       	ldi	r18, 0x40	; 64
 576:	82 9f       	mul	r24, r18
 578:	c0 01       	movw	r24, r0
 57a:	11 24       	eor	r1, r1
 57c:	84 68       	ori	r24, 0x84	; 132
 57e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
while (!(TWCR & (1<<TWINT)));
 582:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 586:	88 23       	and	r24, r24
 588:	e4 f7       	brge	.-8      	; 0x582 <i2c_read+0xe>
return TWDR;
 58a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
}
 58e:	08 95       	ret

00000590 <i2c_start>:
void i2c_start () {
    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
 590:	84 ea       	ldi	r24, 0xA4	; 164
 592:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    while (!(TWCR & (1<<TWINT)));
 596:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 59a:	88 23       	and	r24, r24
 59c:	e4 f7       	brge	.-8      	; 0x596 <i2c_start+0x6>
}
 59e:	08 95       	ret

000005a0 <i2c_init>:
void i2c_init() {
    TWSR = 0x00;
 5a0:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
    TWBR = 152;
 5a4:	88 e9       	ldi	r24, 0x98	; 152
 5a6:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
    TWCR = 0x04;
 5aa:	84 e0       	ldi	r24, 0x04	; 4
 5ac:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 5b0:	08 95       	ret

000005b2 <rtc_init>:
}
void rtc_init (void) {
i2c_init();
 5b2:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <i2c_init>
i2c_start();
 5b6:	0e 94 c8 02 	call	0x590	; 0x590 <i2c_start>
i2c_write(0xDE);
 5ba:	8e ed       	ldi	r24, 0xDE	; 222
 5bc:	0e 94 b0 02 	call	0x560	; 0x560 <i2c_write>
i2c_write(0x07);
 5c0:	87 e0       	ldi	r24, 0x07	; 7
 5c2:	0e 94 b0 02 	call	0x560	; 0x560 <i2c_write>
i2c_write(0x00);
 5c6:	80 e0       	ldi	r24, 0x00	; 0
 5c8:	0e 94 b0 02 	call	0x560	; 0x560 <i2c_write>
i2c_stop();
 5cc:	0e 94 ac 02 	call	0x558	; 0x558 <i2c_stop>

i2c_start();
 5d0:	0e 94 c8 02 	call	0x590	; 0x590 <i2c_start>
i2c_write(0xDE);
 5d4:	8e ed       	ldi	r24, 0xDE	; 222
 5d6:	0e 94 b0 02 	call	0x560	; 0x560 <i2c_write>
i2c_write(0x00);
 5da:	80 e0       	ldi	r24, 0x00	; 0
 5dc:	0e 94 b0 02 	call	0x560	; 0x560 <i2c_write>
i2c_write(0x40);
 5e0:	80 e4       	ldi	r24, 0x40	; 64
 5e2:	0e 94 b0 02 	call	0x560	; 0x560 <i2c_write>
i2c_stop();
 5e6:	0e 94 ac 02 	call	0x558	; 0x558 <i2c_stop>
 5ea:	08 95       	ret

000005ec <rtc_setTime>:
}

void rtc_setTime (unsigned char h, unsigned char m, unsigned char s) {
 5ec:	1f 93       	push	r17
 5ee:	cf 93       	push	r28
 5f0:	df 93       	push	r29
 5f2:	c8 2f       	mov	r28, r24
 5f4:	d6 2f       	mov	r29, r22
 5f6:	14 2f       	mov	r17, r20

i2c_start();
 5f8:	0e 94 c8 02 	call	0x590	; 0x590 <i2c_start>
i2c_write(0xDE);
 5fc:	8e ed       	ldi	r24, 0xDE	; 222
 5fe:	0e 94 b0 02 	call	0x560	; 0x560 <i2c_write>
i2c_write(s);
 602:	81 2f       	mov	r24, r17
 604:	0e 94 b0 02 	call	0x560	; 0x560 <i2c_write>
i2c_write(m);
 608:	8d 2f       	mov	r24, r29
 60a:	0e 94 b0 02 	call	0x560	; 0x560 <i2c_write>
i2c_write(h);
 60e:	8c 2f       	mov	r24, r28
 610:	0e 94 b0 02 	call	0x560	; 0x560 <i2c_write>
i2c_stop();
 614:	0e 94 ac 02 	call	0x558	; 0x558 <i2c_stop>
}
 618:	df 91       	pop	r29
 61a:	cf 91       	pop	r28
 61c:	1f 91       	pop	r17
 61e:	08 95       	ret

00000620 <rtc_getTime>:

void rtc_getTime  (unsigned char *h, unsigned char *m, unsigned char *s) {
 620:	ef 92       	push	r14
 622:	ff 92       	push	r15
 624:	0f 93       	push	r16
 626:	1f 93       	push	r17
 628:	cf 93       	push	r28
 62a:	df 93       	push	r29
 62c:	ec 01       	movw	r28, r24
 62e:	8b 01       	movw	r16, r22
 630:	7a 01       	movw	r14, r20
i2c_start();
 632:	0e 94 c8 02 	call	0x590	; 0x590 <i2c_start>
i2c_write(0xDE);
 636:	8e ed       	ldi	r24, 0xDE	; 222
 638:	0e 94 b0 02 	call	0x560	; 0x560 <i2c_write>
i2c_write(0);
 63c:	80 e0       	ldi	r24, 0x00	; 0
 63e:	0e 94 b0 02 	call	0x560	; 0x560 <i2c_write>
i2c_stop();
 642:	0e 94 ac 02 	call	0x558	; 0x558 <i2c_stop>

i2c_start();
 646:	0e 94 c8 02 	call	0x590	; 0x590 <i2c_start>
i2c_write(0xDF);
 64a:	8f ed       	ldi	r24, 0xDF	; 223
 64c:	0e 94 b0 02 	call	0x560	; 0x560 <i2c_write>
*s = i2c_read(1);
 650:	81 e0       	ldi	r24, 0x01	; 1
 652:	0e 94 ba 02 	call	0x574	; 0x574 <i2c_read>
 656:	f7 01       	movw	r30, r14
 658:	80 83       	st	Z, r24
*m = i2c_read(1);
 65a:	81 e0       	ldi	r24, 0x01	; 1
 65c:	0e 94 ba 02 	call	0x574	; 0x574 <i2c_read>
 660:	f8 01       	movw	r30, r16
 662:	80 83       	st	Z, r24
*h = i2c_read(0);
 664:	80 e0       	ldi	r24, 0x00	; 0
 666:	0e 94 ba 02 	call	0x574	; 0x574 <i2c_read>
 66a:	88 83       	st	Y, r24
i2c_stop();
 66c:	0e 94 ac 02 	call	0x558	; 0x558 <i2c_stop>
}
 670:	df 91       	pop	r29
 672:	cf 91       	pop	r28
 674:	1f 91       	pop	r17
 676:	0f 91       	pop	r16
 678:	ff 90       	pop	r15
 67a:	ef 90       	pop	r14
 67c:	08 95       	ret

0000067e <read_analogue_input>:


uint16_t read_analogue_input(uint8_t input_number)

{
    ADMUX = ((1 << REFS0) | input_number);
 67e:	80 64       	ori	r24, 0x40	; 64
 680:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
    ADCSRA = ((1 << ADEN) | (1 << ADSC) | (1 << ADPS0) | (1 << ADPS1) | (1 << ADPS2));
 684:	87 ec       	ldi	r24, 0xC7	; 199
 686:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    while ((ADCSRA & (1 << ADIF)) == 0) ;
 68a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 68e:	84 ff       	sbrs	r24, 4
 690:	fc cf       	rjmp	.-8      	; 0x68a <read_analogue_input+0xc>
    ADCSRA = (1 << ADIF);
 692:	80 e1       	ldi	r24, 0x10	; 16
 694:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    return ADC;
 698:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 69c:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>

}
 6a0:	08 95       	ret

000006a2 <_exit>:
 6a2:	f8 94       	cli

000006a4 <__stop_program>:
 6a4:	ff cf       	rjmp	.-2      	; 0x6a4 <__stop_program>
