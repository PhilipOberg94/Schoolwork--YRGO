
UARTCom_Arduino.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000120  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000cc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000120  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000150  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000190  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000736  00000000  00000000  000001c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000069a  00000000  00000000  000008f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000252  00000000  00000000  00000f90  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  000011e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000038b  00000000  00000000  00001228  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000026  00000000  00000000  000015b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  000015d9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 54 00 	call	0xa8	; 0xa8 <main>
  78:	0c 94 64 00 	jmp	0xc8	; 0xc8 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <USART_init>:
#define F_CPU 16000000UL // Assuming 16 MHz clock
#include <avr/io.h>
#include <util/delay.h>

void USART_init(unsigned int ubrr) {
    UBRR0H = (unsigned char)(ubrr>>8);
  80:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
    UBRR0L = (unsigned char)ubrr;
  84:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
    UCSR0B = (1<<RXEN0)|(1<<TXEN0);
  88:	88 e1       	ldi	r24, 0x18	; 24
  8a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    UCSR0C = (1<<UCSZ01)|(1<<UCSZ00); // 8 data bits, 1 stop bit
  8e:	86 e0       	ldi	r24, 0x06	; 6
  90:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
    DDRD = 0b00000100;
  94:	84 e0       	ldi	r24, 0x04	; 4
  96:	8a b9       	out	0x0a, r24	; 10
  98:	08 95       	ret

0000009a <USART_receive>:
}

unsigned char USART_receive(void) {
    while (!(UCSR0A & (1<<RXC0)));
  9a:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  9e:	88 23       	and	r24, r24
  a0:	e4 f7       	brge	.-8      	; 0x9a <USART_receive>
    return UDR0;
  a2:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}
  a6:	08 95       	ret

000000a8 <main>:

int main(void) {
    USART_init(103); // 9600 Baud rate at 16MHz
  a8:	87 e6       	ldi	r24, 0x67	; 103
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	0e 94 40 00 	call	0x80	; 0x80 <USART_init>
    uint16_t receivedData [4] = {0,0,0,0};

    while(1) {
        while (USART_receive() != 'S');
  b0:	0e 94 4d 00 	call	0x9a	; 0x9a <USART_receive>
  b4:	83 35       	cpi	r24, 0x53	; 83
  b6:	e1 f7       	brne	.-8      	; 0xb0 <main+0x8>
  b8:	c0 e0       	ldi	r28, 0x00	; 0
  ba:	03 c0       	rjmp	.+6      	; 0xc2 <main+0x1a>
            for (uint8_t i = 0; i<3; i++) {
                receivedData [i] = USART_receive();
  bc:	0e 94 4d 00 	call	0x9a	; 0x9a <USART_receive>
    USART_init(103); // 9600 Baud rate at 16MHz
    uint16_t receivedData [4] = {0,0,0,0};

    while(1) {
        while (USART_receive() != 'S');
            for (uint8_t i = 0; i<3; i++) {
  c0:	cf 5f       	subi	r28, 0xFF	; 255
  c2:	c3 30       	cpi	r28, 0x03	; 3
  c4:	d8 f3       	brcs	.-10     	; 0xbc <main+0x14>
  c6:	f4 cf       	rjmp	.-24     	; 0xb0 <main+0x8>

000000c8 <_exit>:
  c8:	f8 94       	cli

000000ca <__stop_program>:
  ca:	ff cf       	rjmp	.-2      	; 0xca <__stop_program>
