
HW-lektion16.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000140  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000ec  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000140  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000170  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000771  00000000  00000000  000001d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000654  00000000  00000000  00000949  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000247  00000000  00000000  00000f9d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  000011e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000355  00000000  00000000  00001218  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000021  00000000  00000000  0000156d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  0000158e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 4f 00 	call	0x9e	; 0x9e <main>
  78:	0c 94 74 00 	jmp	0xe8	; 0xe8 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <execute>:
#define MOSI 3
#define SCK 5
#define SS 2

void execute (unsigned char cmd, unsigned char data) {
    PORTB &= ~(1<<SS);
  80:	95 b1       	in	r25, 0x05	; 5
  82:	9b 7f       	andi	r25, 0xFB	; 251
  84:	95 b9       	out	0x05, r25	; 5
    
    SPDR = cmd;
  86:	8e bd       	out	0x2e, r24	; 46
    while (!(SPSR & (1<<SPIF)));
  88:	0d b4       	in	r0, 0x2d	; 45
  8a:	07 fe       	sbrs	r0, 7
  8c:	fd cf       	rjmp	.-6      	; 0x88 <execute+0x8>
    
    SPDR = data;
  8e:	6e bd       	out	0x2e, r22	; 46
    while (!(SPSR & (1<<SPIF)));
  90:	0d b4       	in	r0, 0x2d	; 45
  92:	07 fe       	sbrs	r0, 7
  94:	fd cf       	rjmp	.-6      	; 0x90 <execute+0x10>
    
    PORTB |= (1<<SS);
  96:	85 b1       	in	r24, 0x05	; 5
  98:	84 60       	ori	r24, 0x04	; 4
  9a:	85 b9       	out	0x05, r24	; 5
  9c:	08 95       	ret

0000009e <main>:
}


int main(void)
{
    DDRB = (1<<MOSI) | (1<<SCK) | (1<<SS);
  9e:	8c e2       	ldi	r24, 0x2C	; 44
  a0:	84 b9       	out	0x04, r24	; 4
    SPCR = (1<<SPE) | (1<<MSTR) | (1<<SPR0);
  a2:	81 e5       	ldi	r24, 0x51	; 81
  a4:	8c bd       	out	0x2c, r24	; 44
    
    execute(0x09, 0b11111111);
  a6:	6f ef       	ldi	r22, 0xFF	; 255
  a8:	89 e0       	ldi	r24, 0x09	; 9
  aa:	0e 94 40 00 	call	0x80	; 0x80 <execute>
    
    execute(0x0B, 0x05);
  ae:	65 e0       	ldi	r22, 0x05	; 5
  b0:	8b e0       	ldi	r24, 0x0B	; 11
  b2:	0e 94 40 00 	call	0x80	; 0x80 <execute>
    execute(0x0C, 0x01);
  b6:	61 e0       	ldi	r22, 0x01	; 1
  b8:	8c e0       	ldi	r24, 0x0C	; 12
  ba:	0e 94 40 00 	call	0x80	; 0x80 <execute>
    execute(0x01, 0x08);
  be:	68 e0       	ldi	r22, 0x08	; 8
  c0:	81 e0       	ldi	r24, 0x01	; 1
  c2:	0e 94 40 00 	call	0x80	; 0x80 <execute>
    execute(0x02, 0x00);
  c6:	60 e0       	ldi	r22, 0x00	; 0
  c8:	82 e0       	ldi	r24, 0x02	; 2
  ca:	0e 94 40 00 	call	0x80	; 0x80 <execute>
    execute(0x03, 0x00);
  ce:	60 e0       	ldi	r22, 0x00	; 0
  d0:	83 e0       	ldi	r24, 0x03	; 3
  d2:	0e 94 40 00 	call	0x80	; 0x80 <execute>
    execute(0x04, 0x08);
  d6:	68 e0       	ldi	r22, 0x08	; 8
  d8:	84 e0       	ldi	r24, 0x04	; 4
  da:	0e 94 40 00 	call	0x80	; 0x80 <execute>
    execute(0x05, 0x05);
  de:	65 e0       	ldi	r22, 0x05	; 5
  e0:	85 e0       	ldi	r24, 0x05	; 5
  e2:	0e 94 40 00 	call	0x80	; 0x80 <execute>
  e6:	ff cf       	rjmp	.-2      	; 0xe6 <main+0x48>

000000e8 <_exit>:
  e8:	f8 94       	cli

000000ea <__stop_program>:
  ea:	ff cf       	rjmp	.-2      	; 0xea <__stop_program>
